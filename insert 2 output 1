#insert x(2) output(1)
#1. 데이터

import numpy as np
x1 = np.array([range(100), range(311,411), range(100)])
x2 = np.array([range(501,601), range(711,811), range(100)])

y1 = np.array([range(100,200), range(311,411), range(100,200)])

x1 = np.transpose(x1)
x2 = np.transpose(x2)
y1 = np.transpose(y1)

print(x1.shape) # (100,3)
print(x2.shape) # (100,3)
print(y1.shape) # (100,3)

from sklearn.model_selection import train_test_split #test_size, train_size, stratify
x1_train, x1_test, y1_train, y1_test = train_test_split(x1, y1, random_state=6, test_size=0.4, shuffle=False)
x1_val, x1_test, y1_val, y1_test = train_test_split(x1_test, y1_test, random_state=6, test_size=0.5, shuffle=False)
x2_train, x2_test = train_test_split(x2, random_state=6, test_size=0.4, shuffle=False)
x2_val, x2_test = train_test_split(x2_test, random_state=6, test_size=0.5, shuffle=False)
# 6:2:2
print(x2_test.shape) # (20,3)

#2. 모델구성
from keras.models import Sequential, Model
from keras.layers import Dense, Input
# model = Sequential()
# model.add(Dense(5, input_shape=(1, ), activation='relu'))
# model.add(Dense(10))
# model.add(Dense(5))
# model.add(Dense(1))

input1 = Input(shape=(3,))
dense1 = Dense(5,activation='relu')(input1)
dense2 = Dense(3)(dense1)
dense3 = Dense(4)(dense2)
dense4 = Dense(4)(dense3)
middle1 = Dense(3)(dense4)

input2 = Input(shape=(3,))
xx = Dense(5,activation='relu')(input2)
xx = Dense(3)(xx)
xx = Dense(4)(xx)
xx = Dense(4)(xx)
middle2 = Dense(3)(xx)

# concatenate
from keras.layers.merge import concatenate
marge1 = concatenate([middle1, middle2])
output1 = Dense(31)(marge1)
output1 = Dense(32)(output1)
output1 = Dense(3)(output1)

model = Model(input = [input1, input2], output = output1)
model.summary()

#3. 훈련
# model.compile(loss='mse', optimizer='adam', metrics=['accuracy'])
model.compile(loss='mse', optimizer='adam',metrics=['mse'])

# model.fit(x_train,y_train, epochs=100,batch_size=1)
# model.fit(x1_train,y1_train, epochs=100,batch_size=1, validation_data=(x1_val, y1_val))
model.fit([x1_train,x2_train],y1_train, epochs=100, batch_size=1, validation_data=([x1_val, x2_val],y1_val))

#4. 평가예측
mse = model.evaluate([x1_train,x2_train],[y1_train], batch_size=1) # a[0], a[1]
print('mse[0] : ', mse[0])
print('mse[1] : ', mse[1]) # x1, x2, merge, y1 =4개

y1_predict = model.predict([x1_test,x2_test])
print(y1_predict)

# RMSE 구하기
from sklearn.metrics import mean_squared_error
# def RMSE(y_test, y_predict):
    # return np.sqrt(mean_squared_error(y1_test, y1_predict))
# print("RMSE: ", RMSE(y1_test, y1_predict))
# def RMSE2(y_test, y_predict):
#     return np.sqrt(mean_squared_error(y2_test, y2_predict))
# print("RMSE2: ", RMSE2(y2_test, y2_predict))
def RMSE(x, y):
    return np.sqrt(mean_squared_error(x, y))
RMSE1 = RMSE(y1_test, y1_predict)
print("RMSE(1): ", RMSE1)

# R2 구하기
from sklearn.metrics import r2_score
r2_y_predict = r2_score(y1_test, y1_predict)
print("R2(1) : ",r2_y_predict)

'''
Epoch 100/100
60/60 [==============================] - 0s 1ms/step - loss: 0.0130 - mse: 0.0130 - val_loss: 0.0025 - val_mse: 0.0025
60/60 [==============================] - 0s 300us/step
mse[0] :  0.0005241871595596119
mse[1] :  0.0005241872277110815
[[180.05641 391.08987 180.00781]
 [181.05713 392.09158 181.00786]
 [182.05789 393.09354 182.0079 ]
 [183.05861 394.09537 183.00797]
 [184.0594  395.09726 184.00806]
 [185.06018 396.09912 185.00815]
 [186.0609  397.10086 186.00818]
 [187.06166 398.1028  187.00827]
 [188.0624  399.1047  188.00835]
 [189.06323 400.10654 189.00848]
 [190.06398 401.10843 190.00858]
 [191.06471 402.11017 191.00859]
 [192.06544 403.11206 192.00865]
 [193.06624 404.11398 193.00876]
 [194.06697 405.11584 194.00879]
 [195.06773 406.1177  195.0089 ]
 [196.0685  407.11954 196.00899]
 [197.06923 408.12143 197.009  ]
 [198.06998 409.12323 198.00908]
 [199.0708  410.12512 199.00919]]
RMSE(1):  0.0725589749245795
R2(1) :  0.9998416600047486
'''
